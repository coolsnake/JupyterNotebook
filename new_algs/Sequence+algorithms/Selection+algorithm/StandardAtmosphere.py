#!/usr/bin/env python3
#
info = """
StandardAtmosphere.py

    Tools for working with a standard atmosphere data.

Author: Kevin R. Johnson
Email: Kevin@KevinJohnsonAviation.com
Copyright (C) 2015 Kevin R. Johnson 
Released under the GNU General Public License v3.0

    StandardAtmosphere.py is free software: 
    you can redistribute it and/or modify it under the terms of the 
    GNU General Public License as published by the Free Software Foundation, 
    either version 3 of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    A copy of the GNU General Public License is available at:
    https://www.gnu.org/licenses/gpl-3.0.txt

    
    Atmospheric data from http://www.pdas.com/e2.html
  Col#  ID      Description
  0     alt     Altitude in feet.
  1     sigma   Density divided by sea-level density.
  2     delta   Pressure divided by sea-level pressure.
  3     theta   Temperature divided by sea-level temperature.
  4     temp    Temperature in degrees Rankine.
  6     press   Pressure in pounds per square foot.
  7     dens    Density in slugs per cubic foot.
  8     machFPS Speed of sound in feet per second.
  9     visc    Viscosity in 10**(-6) slugs per foot-second.
  10    kvisc   Kinematic viscosity in square feet per second.
  11    ratio   Speed of sound divided by kinematic viscosity times 10**(-6).
"""

### Import useful libraries
from scipy.interpolate import interp1d
import string

# Column Dictionary!
Index = {'alt':0, 'sigma':1, 'delta':2, 'theta':3, 'temp':4, 
         'press':5, 'dens':6, 'machFPS':7, 'visc':8, 'kvisc':9, 'ratio':10}

# Data by the 1976 United States Committee on Extension to the Standard Atmosphere (COESA)
StandardAtmosphereData = [
[-1000.0, 1.0296, 1.0367, 1.0069, 522.2, 2193.8, 0.0024472, 1120.3, 0.376, 0.000154, 7.30],
[ 0000.0, 1.0000, 1.0000, 1.0000, 518.7, 2116.2, 0.0023769, 1116.5, 0.374, 0.000157, 7.10],
[ 1000.0, 0.9711, 0.9644, 0.9931, 515.1, 2040.9, 0.0023081, 1112.6, 0.372, 0.000161, 6.91],
[ 2000.0, 0.9428, 0.9298, 0.9863, 511.5, 1967.7, 0.0022409, 1108.7, 0.370, 0.000165, 6.72],
[ 3000.0, 0.9151, 0.8963, 0.9794, 508.0, 1896.7, 0.0021752, 1104.9, 0.368, 0.000169, 6.54],
[ 4000.0, 0.8881, 0.8637, 0.9725, 504.4, 1827.7, 0.0021109, 1101.0, 0.366, 0.000173, 6.36],
[ 5000.0, 0.8617, 0.8321, 0.9656, 500.8, 1760.9, 0.0020482, 1097.1, 0.364, 0.000178, 6.18],
[ 6000.0, 0.8359, 0.8014, 0.9588, 497.3, 1696.0, 0.0019869, 1093.2, 0.362, 0.000182, 6.01],
[ 7000.0, 0.8107, 0.7717, 0.9519, 493.7, 1633.1, 0.0019270, 1089.3, 0.360, 0.000187, 5.84],
[ 8000.0, 0.7861, 0.7429, 0.9450, 490.2, 1572.1, 0.0018685, 1085.3, 0.358, 0.000191, 5.67],
[ 9000.0, 0.7621, 0.7149, 0.9381, 486.6, 1512.9, 0.0018113, 1081.4, 0.355, 0.000196, 5.51],
[10000.0, 0.7386, 0.6878, 0.9313, 483.0, 1455.6, 0.0017555, 1077.4, 0.353, 0.000201, 5.35],
[11000.0, 0.7157, 0.6616, 0.9244, 479.5, 1400.1, 0.0017011, 1073.4, 0.351, 0.000207, 5.20],
[12000.0, 0.6933, 0.6362, 0.9175, 475.9, 1346.2, 0.0016480, 1069.4, 0.349, 0.000212, 5.05],
[13000.0, 0.6715, 0.6115, 0.9107, 472.3, 1294.1, 0.0015961, 1065.4, 0.347, 0.000218, 4.90],
[14000.0, 0.6502, 0.5877, 0.9038, 468.8, 1243.6, 0.0015455, 1061.4, 0.345, 0.000223, 4.75],
[15000.0, 0.6295, 0.5646, 0.8969, 465.2, 1194.8, 0.0014962, 1057.4, 0.343, 0.000229, 4.61],
[16000.0, 0.6092, 0.5422, 0.8901, 461.7, 1147.5, 0.0014480, 1053.3, 0.341, 0.000235, 4.47],
[17000.0, 0.5895, 0.5206, 0.8832, 458.1, 1101.7, 0.0014011, 1049.2, 0.339, 0.000242, 4.34],
[18000.0, 0.5702, 0.4997, 0.8763, 454.5, 1057.5, 0.0013553, 1045.1, 0.337, 0.000248, 4.21],
[19000.0, 0.5514, 0.4795, 0.8695, 451.0, 1014.7, 0.0013107, 1041.0, 0.335, 0.000255, 4.08],
[20000.0, 0.5332, 0.4599, 0.8626, 447.4,  973.3, 0.0012673, 1036.9, 0.332, 0.000262, 3.95],
[21000.0, 0.5153, 0.4410, 0.8558, 443.9,  933.3, 0.0012249, 1032.8, 0.330, 0.000270, 3.83],
[22000.0, 0.4980, 0.4227, 0.8489, 440.3,  894.6, 0.0011836, 1028.6, 0.328, 0.000277, 3.71],
[23000.0, 0.4811, 0.4051, 0.8420, 436.7,  857.2, 0.0011435, 1024.5, 0.326, 0.000285, 3.59],
[24000.0, 0.4646, 0.3880, 0.8352, 433.2,  821.2, 0.0011043, 1020.3, 0.324, 0.000293, 3.48],
[25000.0, 0.4486, 0.3716, 0.8283, 429.6,  786.3, 0.0010663, 1016.1, 0.322, 0.000302, 3.37],
[26000.0, 0.4330, 0.3557, 0.8215, 426.1,  752.7, 0.0010292, 1011.9, 0.319, 0.000310, 3.26],
[27000.0, 0.4178, 0.3404, 0.8146, 422.5,  720.3, 0.0009931, 1007.7, 0.317, 0.000319, 3.15],
[28000.0, 0.4031, 0.3256, 0.8077, 419.0,  689.0, 0.0009580, 1003.4, 0.315, 0.000329, 3.05],
[29000.0, 0.3887, 0.3113, 0.8009, 415.4,  658.8, 0.0009239,  999.1, 0.313, 0.000339, 2.95],
[30000.0, 0.3747, 0.2975, 0.7940, 411.8,  629.7, 0.0008907,  994.8, 0.311, 0.000349, 2.85],
[31000.0, 0.3611, 0.2843, 0.7872, 408.3,  601.6, 0.0008584,  990.5, 0.308, 0.000359, 2.76],
[32000.0, 0.3480, 0.2715, 0.7803, 404.7,  574.6, 0.0008270,  986.2, 0.306, 0.000370, 2.66],
[33000.0, 0.3351, 0.2592, 0.7735, 401.2,  548.5, 0.0007966,  981.9, 0.304, 0.000382, 2.57],
[34000.0, 0.3227, 0.2474, 0.7666, 397.6,  523.5, 0.0007670,  977.5, 0.302, 0.000393, 2.48],
[35000.0, 0.3106, 0.2360, 0.7598, 394.1,  499.3, 0.0007382,  973.1, 0.300, 0.000406, 2.4],
[36000.0, 0.2988, 0.2250, 0.7529, 390.5,  476.1, 0.0007103,  968.7, 0.297, 0.000419, 2.31],
[37000.0, 0.2852, 0.2145, 0.7519, 390.0,  453.9, 0.0006780,  968.1, 0.297, 0.000438, 2.21],
[38000.0, 0.2719, 0.2044, 0.7519, 390.0,  432.6, 0.0006463,  968.1, 0.297, 0.000459, 2.11],
[39000.0, 0.2592, 0.1949, 0.7519, 390.0,  412.4, 0.0006161,  968.1, 0.297, 0.000482, 2.01],
[40000.0, 0.2471, 0.1858, 0.7519, 390.0,  393.1, 0.0005873,  968.1, 0.297, 0.000506, 1.91],
[41000.0, 0.2355, 0.1771, 0.7519, 390.0,  374.7, 0.0005598,  968.1, 0.297, 0.000530, 1.83],
[42000.0, 0.2245, 0.1688, 0.7519, 390.0,  357.2, 0.0005336,  968.1, 0.297, 0.000556, 1.74],
[43000.0, 0.2140, 0.1609, 0.7519, 390.0,  340.5, 0.0005087,  968.1, 0.297, 0.000584, 1.66],
[44000.0, 0.2040, 0.1534, 0.7519, 390.0,  324.6, 0.0004849,  968.1, 0.297, 0.000612, 1.58],
[45000.0, 0.1945, 0.1462, 0.7519, 390.0,  309.4, 0.0004623,  968.1, 0.297, 0.000642, 1.51],
[46000.0, 0.1854, 0.1394, 0.7519, 390.0,  295.0, 0.0004407,  968.1, 0.297, 0.000674, 1.44],
[47000.0, 0.1767, 0.1329, 0.7519, 390.0,  281.2, 0.0004201,  968.1, 0.297, 0.000707, 1.37],
[48000.0, 0.1685, 0.1267, 0.7519, 390.0,  268.1, 0.0004005,  968.1, 0.297, 0.000741, 1.31],
[49000.0, 0.1606, 0.1208, 0.7519, 390.0,  255.5, 0.0003817,  968.1, 0.297, 0.000778, 1.24],
[50000.0, 0.1531, 0.1151, 0.7519, 390.0,  243.6, 0.0003639,  968.1, 0.297, 0.000816, 1.19],
[51000.0, 0.1460, 0.1097, 0.7519, 390.0,  232.2, 0.0003469,  968.1, 0.297, 0.000856, 1.13],
[52000.0, 0.1391, 0.1046, 0.7519, 390.0,  221.4, 0.0003307,  968.1, 0.297, 0.000898, 1.08],
[53000.0, 0.1326, 0.0997, 0.7519, 390.0,  211.0, 0.0003153,  968.1, 0.297, 0.000942, 0.98],
[54000.0, 0.1264, 0.0951, 0.7519, 390.0,  201.2, 0.0003006,  968.1, 0.297, 0.000988, 0.98],
[55000.0, 0.1205, 0.0906, 0.7519, 390.0,  191.8, 0.0002865,  968.1, 0.297, 0.001040, 0.93],
[56000.0, 0.1149, 0.0864, 0.7519, 390.0,  182.8, 0.0002731,  968.1, 0.297, 0.001090, 0.89],
[57000.0, 0.1096, 0.0824, 0.7519, 390.0,  174.3, 0.0002604,  968.1, 0.297, 0.001140, 0.85],
[58000.0, 0.1044, 0.0785, 0.7519, 390.0,  166.2, 0.0002482,  968.1, 0.297, 0.001200, 0.81],
[59000.0, 0.0996, 0.0749, 0.7519, 390.0,  158.4, 0.0002367,  968.1, 0.297, 0.001250, 0.77],
[60000.0, 0.0949, 0.0714, 0.7519, 390.0,  151.0, 0.0002256,  968.1, 0.297, 0.001320, 0.74]]

### Let's define some useful functions!
## This function returns a function that interpolates data.
def BuildInterp(IndepVarStr, DepVarStr):
    return interp1d([ i[Index[IndepVarStr]] for i in StandardAtmosphereData], 
                    [ i[Index[DepVarStr]]   for i in StandardAtmosphereData], kind='cubic')

## Automatically build, define, and export a function for each column as a function of altitude
#  example:>>>  print "Density ratio at {0:,}' is {1:1.3e}".format(17950, Delta(17950))
#          Density ratio at 17,950' is 5.007e-01
for i in Index.keys():
    exec( "def {0}(altitude): return float(BuildInterp('alt','{1}')(altitude))".format(i.title(),i))

## Automatically build, define, and export a function for each column as a function of each other column
#  example: KviscWrtAlt(AltitudeOfChoice)
for i in Index.keys():
    for j in Index.keys():
        exec( "def {0}(var): return float(BuildInterp('{2}','{1}')(var))".format(i.title()+'Wrt'+j.title(),i,j))

# Demonstrate usage...
if __name__ == "__main__":
    print( info)
    print( string.join(['Alt (ft)', 'Kvisc\t', 'Sigma\t'],'\t'))
    for i in range(0,3000,500):
        print( "{0:,}\t\t{1:1.3e}\t{2:1.3e}".format(i, Kvisc(i), Sigma(i)))
